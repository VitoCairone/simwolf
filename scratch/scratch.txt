class Critter {
  constructor(world, mass, isWarmBlooded = true) {
    this.world = world;
    this.mass = mass; // in kilograms (kg)
    this.isWarmBlooded = isWarmBlooded;
  }

  // Placeholder temperature functions (°C)
  bodyTemp() { return this.isWarmBlooded ? 37 : this.outsideTemp(); }
  outsideTemp() { return 25; } // Replace with environmental query

  respirate(dt) {
    // --- Physical Constants ---
    const J_PER_GRAM_GLUCOSE = 15900; // energy released per gram of glucose oxidized [J/g]
    const GLUCOSE_MOLAR_MASS = 180.16; // [g/mol]

    const O2_PER_GLUCOSE = 6 * 32.00; // g O2 needed per mol glucose
    const CO2_PER_GLUCOSE = 6 * 44.01; // g CO2 produced per mol glucose
    const H2O_PER_GLUCOSE = 6 * 18.02; // g H2O produced per mol glucose

    // --- Estimate metabolic rate ---
    // Basal metabolic rate (approx): Kleiber's Law — 70 * mass^0.75 for warm-blooded animals
    // Units: [kcal/day], converted to [W] (J/s)
    const baseKcalPerDay = this.isWarmBlooded
      ? 70 * Math.pow(this.mass, 0.75)    // Endotherm (e.g. mammals, birds)
      : 10 * Math.pow(this.mass, 0.75);   // Ectotherm (reptiles, amphibians, etc.)

    const watts = baseKcalPerDay * 4184 / (24 * 3600); // [W] = [J/s]

    const energyNeeded = watts * dt; // [J]

    const glucoseNeeded = energyNeeded / J_PER_GRAM_GLUCOSE; // [g]

    // Compute gas mass changes proportionally
    const molGlucose = glucoseNeeded / GLUCOSE_MOLAR_MASS;

    const O2Needed = molGlucose * O2_PER_GLUCOSE; // [g]
    const CO2Produced = molGlucose * CO2_PER_GLUCOSE; // [g]
    const H2OProduced = molGlucose * H2O_PER_GLUCOSE; // [g]

    // --- Check available fuel and oxygen ---
    if (this.world.EARTH < glucoseNeeded || this.world.AIR.O2 < O2Needed) return;

    // --- Apply respiration reaction ---
    this.world.EARTH -= glucoseNeeded;
    this.world.AIR.O2 -= O2Needed;
    this.world.AIR.CO2 += CO2Produced;
    this.world.WATER += H2OProduced;

    // Optional: return useful energy produced for downstream tracking
    return energyNeeded; // [J]
  }
}


function getTerrainAt_old(gx, gy) {
      // ensure the same result for any point in the tile
      const [x, y] = [gx, gy].map(v => Math.floor(v));

      // All terrain is defined by pseudo-random pure functions of the coordinates,
      // i.e. WITHOUT using Math.random(), so that terrain has a fixed value at all
      // locations for any grid size with no memory requirement scaling.

      const scalar = 0.1;
      // const noise = Math.sin(x * scalar) + Math.sin(y * scalar);
      // const jitter = Math.sin(x * 0.17 + y * 0.23) * 0.5;
      // const grassPatchRate = noise + jitter - 0.8;

      
      // Using this part alone with no randomness provides interesting
      // features, but repetitive on a broad scale -- correct with e.g.
      // wave packets, but before that work on visual improvement esp.
      // for water boundaries and elevation.

      const noise2 = Math.sin(x * scalar) + Math.sin(y * scalar) * 1.3;
      const jitter2 = Math.sin(x * 0.21 + y * 0.19) * 0.4;
      const waterRate = noise2 + jitter2;
      if (waterRate < -0.5) return "water";
      if (waterRate < 0) return "grass";
      if (waterRate < 0.5) return "dirt";
      return "rock";

      // const hash = Math.sin((x * 374761393 + y * 668265263) % 1000000) * 43758.5453;
      // const pseudoRandom = hash - Math.floor(hash); // [0, 1)

      // if (pseudoRandom < grassPatchRate) return "grass";
      // const typePseudorandInt = (x * 73856093) ^ (y * 19349663);
      // const types = ["dirt", "grass", "bush"];
      // return types[Math.abs(typePseudorandInt) % types.length];
    }